
<script>

	
	$(document).ready(function(){
    // the "href" attribute of .modal-trigger must specify the modal ID that wants to be triggered
    $('.modal-trigger').leanModal();
  });
</script>

	<div class="container">
		<div class="row">
			<div class="col s12 center-align">
				<h1> How are you feeling? </h1>
				<p class="flow-text"> Click the button below to start adding those feelings.</p>
				</div>
				</div>
				<div class="row">
				<div class="col s12 center-align">
					<a id="trigger-modal" class="btn-floating btn-large modal-trigger" href="#modal1"><i class="material-icons">edit</i></a>
				</div>
				</div>
	</div>
  <!-- Modal Structure -->
  <div id="modal1" class="modal">
    <div class="modal-content">
    <form id="test">
			<div class="row">
				<div class="col s10">
					<input type="text" placeholder="How are you feeling?">
				</div>
				<div style="padding-top:15px;" class="col s2">
					<div class="icons right">
						<i class="material-icons add">add_circle</i>
					</div>
				</div>
			</div>
		</form>
    <div class="modal-footer">
      <a id="something" href="#!" class="modal-action waves-effect waves-green btn right">Ok time to pop!</a>
    </div>
  </div>



<script>

$('form').on( "click", '.material-icons.delete', function() {
	$(this).closest('.row').slideUp(200, function(){ 
		$(this).remove();
		var numInputs = $('input').length;
		if( numInputs === 1) {
			$('.icons').append('<i class="material-icons add">add_circle</i>');
		}
	});
});

$('form').on( "click", '.material-icons.add', function() {
	$(this).remove();
	$("<%= escape_javascript(render partial: 'form') %>").appendTo('form').hide().slideDown(200);
});

$(document).ready(function() {
  $(window).keydown(function(event){
    if(event.keyCode == 13) {
      event.preventDefault();
      return false;
    }
  });
});

$('#trigger-modal').click(function(){
	if($(this).hasClass('modal-nav') === false){
		var clone = $(this).clone();
		$(this).closest('.container').fadeOut(100, function(){
			$(this).closest('.container').remove();
			var new_button = $('<li><a id="trigger-modal" class="modal-trigger" href="#modal1"><i class="material-icons">edit</i></a></li>').prependTo('#right-links').hide();
			$(new_button).addClass('modal-nav')
			$(new_button).fadeIn(100);
			$('.modal-trigger').leanModal();
		});
	}
});

var sound = true;
var audio = new Audio('blop.mp3');

$('#right-links').append('<li><a id="sound" href="#"><i class="material-icons">volume_up</i></a></li>');

$('#sound').click(function(){
	sound = !sound;
	if(sound){
		$(this).html('<i class="material-icons">volume_up</i>');
	}
	else {
		$(this).html('<i class="material-icons">volume_off</i>');
	}
});

var feelings = [];
var test = true;

$( "#something" ).click(function(e) {
	feelings = []
	$('#test').find('input').each(function () {
			if($(this).val() === ""){
				$(this).before("<span> Hey this can't be empty! </span>");
				test = false;
				return false;
			}
			else {
				test = true;
    		feelings.push(this.value);
    	}
	});
	if(test){
		$('#modal1').closeModal();
		main();
	}
	e.preventDefault();
});
	

	var session_id;

	$( window ).unload(function() {
		if (session_id !== undefined){
			$.ajax({
					url: "/session/end",
					method: "PUT",
					async: false,
					data: { session_id: session_id}
			});
		}
	});

	function main() {
		$('svg').remove();
		if(session_id === undefined) {
			$.ajax({
				url: "/session/create",
				method: "POST",
				data: {},
				dataType: "json",
				success: function ( msg ) {
										session_id = msg.id;
									}
			});
		}
		if($(window).width() === 0){
			$(window).resize(function(){
				game();
			});
		}
		else {
			game();
		}
		resize();
	}

	function resize() {
		$(window).resize(function(){
			var width = (windowWidth());
			var height = (windowHeight());
			$('svg')
			.attr('height',height)
			.attr('width',width);
		});
	}

	function windowHeight(){
		height = $(window).height() - $('nav').height();
		return height;
	}

	function windowWidth(){
		var wWindow = $(window).width();
		if(wWindow < 960){
			var width = 960;
		}
		else {
			var width = wWindow;
		}
		return width;
	}


	function game(){
		//Width and height
		var w = (windowWidth());
		var h = (windowHeight());
		var r = 50;

		//Original data
		var dataset = {
			nodes: [{}]
		};

		//Initialize a default force layout, using the nodes and edges in dataset
		var force = d3.layout.force()
									.nodes(dataset.nodes)
									.size([w, h])
									.gravity(0.01)
									.start();

		var colors = d3.scale.category10();

		//Create SVG element
		var svg = d3.select("body")
								.append("svg")
								.attr("width", w)
								.attr("height", h);

		//Create nodes as circles
		var nodes = svg.selectAll("g")
									 .data(dataset.nodes)
									 .enter()
									 .append("g")
									 .on("click", fadeAway);

		// var circles = nodes.append("circle")
		// 		  						 .attr("class","node")
		// 									 .attr("cx", 0)
		// 									 .attr("cy", 0)
		// 									 .attr("r", r)
		// 									 .style("fill", "red");

		var path = nodes.append('path')
										.attr('d', 'M -25,-20 a 20,20 1 0,0 0,40 h 50 a 20,20 1 0,0 0,-40 a 10,10 1 0,0 -15,-10 a 15,15 1 0,0 -35,10 z');

		var texts = nodes.append("text")
										 .attr("x", 0)
										 .attr("dy", ".35em")
										 .attr("text-anchor", "middle")
										 .style('fill','white')
										 .text("click me");

		//Every time the simulation "ticks", this will be called
		force.on("tick", function () {
		    nodes.attr("transform", function (d) {
		    	var xMax = Math.max(r, Math.min(w - r, d.x))
		    	var yMax = Math.max(r, Math.min(h - r, d.y))
		    	return "translate(" + xMax + "," + yMax + ")";
		    });

		});



		function createNode() {

			var node = {"x":randomPosition(25,w-25),"y":randomPosition(25,h-25)};
			var theFeeling = randomFeeling()

			dataset.nodes.push(node);
			nodes = nodes.data(dataset.nodes);

			var newNode = nodes.enter()
												 .insert("g")
												 .on("click", fadeAway); 

			// newNode.append('circle')
			// 			 .attr("class","node")
			// 			 .attr("cx", newNode.x)
			// 			 .attr("cy", newNode.y)
			// 			 .attr("r", r)
			// 			 .style("fill", "red");

		var path = nodes.append('path')
										.attr('d', 'M -25,-20 a 20,20 1 0,0 0,40 h 50 a 20,20 1 0,0 0,-40 a 10,10 1 0,0 -15,-10 a 15,15 1 0,0 -35,10 z')
										.attr('transform', function(d){

											if( theFeeling.length > 9 ){
												return 'scale('+ (1 + (theFeeling.length - 9) * 0.07) +')'
											}
											else {
												return 'scale(1)'
											}

										});

			var someText = newNode.append("text")
														.attr("x", 0)
														.attr("dy", ".35em")
														.attr("text-anchor", "middle")
														.style('fill','white')
														.text(theFeeling);

			force.start();

		}

		function randomPosition(min, max) {
			return Math.floor(Math.random()*(max-min+1)+min);
		}

		function fadeAway(){
			d3.select(this).style("opacity", 1)
										 .transition()
										 .duration(0)
										 .style("opacity", 0)
										 .remove();
			if (sound){
				audio.play();
			}
			var feeling = d3.select(this).selectAll('text');
			var feeling = $(feeling).text();
			
			var request = $.ajax({
				url: "/feeling",
				method: "POST",
				data: { text : feeling, session_id : session_id },
				dataType: "html"
			});

			request.done(function( msg ) {
			});

			request.fail(function( jqXHR, textStatus ) {
				console.log( "Request failed: " + textStatus );
			});

			createNode();
		}

		function randomFeeling(){
			return feelings[Math.floor(Math.random()*feelings.length)];
		}

	}

</script>