
<script>
	
	$(document).ready(function(){
    // the "href" attribute of .modal-trigger must specify the modal ID that wants to be triggered
    $('.modal-trigger').leanModal();
  });
</script>

  <!-- Modal Trigger -->
   <div class="row">
        <div class="col s12">
          <div class="card fixed-centered">
            <div class="card-content">
              <span class="card-title black-text">How are you feeling?</span>
              <p>Click the button below to feel the instant something something.</p>
            </div>
            <div class="card-action">
              <a id="trigger-modal" class="waves-effect waves-light btn modal-trigger" href="#modal1">Modal</a>
            </div>
          </div>
        </div>
      </div>
  
<i class="large material-icons">insert_chart</i>
  <!-- Modal Structure -->
  <div id="modal1" class="modal">
    <div class="modal-content">
			<form id="test">
				<div class="row">
					<div class="col s11">
				 <input type="text" placeholder="How are you feeling?">
				 </div>
				 <div class="col s1">
				 	<i class="material-icons delete">delete</i>
				 </div>
				</div>
			</form>
    <div class="modal-footer">
    	<i class="material-icons add">add_circle</i>
      <a id="something" href="#!" class=" modal-action modal-close waves-effect waves-green btn-flat">Agree</a>
    </div>
  </div>



<script>

$('.material-icons.delete').click(function(){
	$(this).closest('.row').slideUp(200, function(){ $(this).remove()});
});
$('.material-icons.add').click(function(){
	$('form').append('<div class="row"><div class="col s11"><input type="text" placeholder="How are you feeling?"></div><div class="col s1"><i class="material-icons delete">delete</i></div></div>');
});

$('#trigger-modal').click(function(){
	if($(this).hasClass('fixed-top-right') === false){
		var clone = $(this).clone();
		$(this).parent().fadeOut(100, function(){
			$(this).parent().remove();
			var new_button = $(clone).appendTo('body').hide();
			$(new_button).addClass('fixed-top-right');
			$(new_button).fadeIn(100);
			$('.modal-trigger').leanModal();
		});
	}
});



var feelings = [];

$( "#something" ).click(function() {
	feelings = []
	$('#test').find('input').each(function () {
    	feelings.push(this.value);
	});
	main();
});
	

	var session_id;

	$( window ).unload(function() {
		if (session_id !== undefined){
			$.ajax({
					url: "/session/end",
					method: "PUT",
					async: false,
					data: { session_id: session_id}
			});
		}
	});

	function main() {
		$('svg').remove();
		if(session_id === undefined) {
			$.ajax({
				url: "/session/create",
				method: "POST",
				data: {},
				dataType: "json",
				success: function ( msg ) {
										session_id = msg.id;
									}
			});
		}
		if($(window).width() === 0){
			$(window).resize(function(){
				game();
			});
		}
		else {
			game();
		}
		resize();
	}

	function resize() {
		$(window).resize(function(){
			var width = (windowWidth());
			var height = (windowHeight());
			$('svg')
			.attr('height',height)
			.attr('width',width);
		});
	}

	function windowHeight(){
		var hWindow = $(window).height();
		if(hWindow < 600){
			var height = 600;
		}
		else {
			var height = hWindow;
		}
		return height;
	}

	function windowWidth(){
		var wWindow = $(window).width();
		if(wWindow < 960){
			var width = 960;
		}
		else {
			var width = wWindow;
		}
		return width;
	}


	function game(){
		//Width and height
		var w = (windowWidth());
		var h = (windowHeight());
		var r = 50;

		//Original data
		var dataset = {
			nodes: [{}]
		};

		//Initialize a default force layout, using the nodes and edges in dataset
		var force = d3.layout.force()
									.nodes(dataset.nodes)
									.size([w, h])
									.charge(-200)
									.gravity(0.3)
									.start();

		var colors = d3.scale.category10();

		//Create SVG element
		var svg = d3.select("body")
								.append("svg")
								.attr("width", w)
								.attr("height", h);

		//Create nodes as circles
		var nodes = svg.selectAll("g")
									 .data(dataset.nodes)
									 .enter()
									 .append("g")
									 .on("click", fadeAway);

		// var circles = nodes.append("circle")
		// 		  						 .attr("class","node")
		// 									 .attr("cx", 0)
		// 									 .attr("cy", 0)
		// 									 .attr("r", r)
		// 									 .style("fill", "red");

		var path = nodes.append('path')
										.attr('d', 'M -25,-20 a 20,20 1 0,0 0,40 h 50 a 20,20 1 0,0 0,-40 a 10,10 1 0,0 -15,-10 a 15,15 1 0,0 -35,10 z');

		var texts = nodes.append("text")
										 .attr("x", 0)
										 .attr("dy", ".35em")
										 .attr("text-anchor", "middle")
										 .style('fill','white')
										 .text("click me");

		//Every time the simulation "ticks", this will be called
		force.on("tick", function () {
		    nodes.attr("transform", function (d) {
		    	// var xMax = Math.max(r, Math.min(w - r, d.x))
		    	// var yMax = Math.max(r, Math.min(h - r, d.y))
		    	return "translate(" + d.x + "," + d.y + ")";
		    });

		});



		function createNode() {

			var node = {"x":randomPosition(),"y":randomPosition()};
			var theFeeling = randomFeeling()

			dataset.nodes.push(node);
			nodes = nodes.data(dataset.nodes);

			var newNode = nodes.enter()
												 .insert("g")
												 .on("click", fadeAway); 

			// newNode.append('circle')
			// 			 .attr("class","node")
			// 			 .attr("cx", newNode.x)
			// 			 .attr("cy", newNode.y)
			// 			 .attr("r", r)
			// 			 .style("fill", "red");

		var path = nodes.append('path')
										.attr('d', 'M -25,-20 a 20,20 1 0,0 0,40 h 50 a 20,20 1 0,0 0,-40 a 10,10 1 0,0 -15,-10 a 15,15 1 0,0 -35,10 z')
										.attr('transform', function(d){

											if( theFeeling.length > 9 ){
												return 'scale('+ (1 + (theFeeling.length - 9) * 0.07) +')'
											}
											else {
												return 'scale(1)'
											}

										});

			var someText = newNode.append("text")
														.attr("x", 0)
														.attr("dy", ".35em")
														.attr("text-anchor", "middle")
														.style('fill','white')
														.text(theFeeling);

			force.start();

		}

		function randomPosition() {
			var numArray = [1];
			var randomNum = numArray[Math.floor(Math.random() * numArray.length)];
			var randomNum = randomNum * Math.round(Math.random()*1200);
			return randomNum;

		}

		function fadeAway(){
			d3.select(this).style("opacity", 1)
										 .transition()
										 .duration(0)
										 .style("opacity", 0)
										 .remove();
			var feeling = d3.select(this).selectAll('text');
			var feeling = $(feeling).text();
			
			var request = $.ajax({
				url: "/feeling",
				method: "POST",
				data: { text : feeling, session_id : session_id },
				dataType: "html"
			});

			request.done(function( msg ) {
			});

			request.fail(function( jqXHR, textStatus ) {
				console.log( "Request failed: " + textStatus );
			});

			createNode();
		}

		function randomFeeling(){
			return feelings[Math.floor(Math.random()*feelings.length)];
		}

	}

</script>